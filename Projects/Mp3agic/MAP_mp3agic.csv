com.mpatric.mp3agic.BaseException.getDetailedMessage();com.mpatric.mp3agic.BaseExceptionTest.generatesCorrectDetailedMessageForSingleException();com.mpatric.mp3agic.BaseExceptionTest.generatesCorrectDetailedMessageForChainedBaseExceptions();;;;;;;;;;;;
com.mpatric.mp3agic.BufferTools.indexOfTerminator(byte[],int,int);com.mpatric.mp3agic.BufferToolsTest.findsSingleTerminator();com.mpatric.mp3agic.BufferToolsTest.findsFirstSingleTerminator();com.mpatric.mp3agic.BufferToolsTest.findsFirstSingleTerminatorAfterFromIndex();com.mpatric.mp3agic.BufferToolsTest.findsSingleTerminatorWhenFirstElement();com.mpatric.mp3agic.BufferToolsTest.findsSingleTerminatorWhenLastElement();com.mpatric.mp3agic.BufferToolsTest.ReturnsMinusOneWhenNoSingleTerminator();com.mpatric.mp3agic.BufferToolsTest.findsDoubleTerminator();com.mpatric.mp3agic.BufferToolsTest.findsNotFindDoubleTerminatorIfNotOnEvenByte();com.mpatric.mp3agic.BufferToolsTest.findsFirstDoubleTerminator();com.mpatric.mp3agic.BufferToolsTest.findsFirstDoubleTerminatorOnAnEvenByte();com.mpatric.mp3agic.BufferToolsTest.findsFirstDoubleTerminatorAfterFromIndex();com.mpatric.mp3agic.BufferToolsTest.findsDoubleTerminatorWhenFirstElement();com.mpatric.mp3agic.BufferToolsTest.findsDoubleTerminatorWhenLastElement();com.mpatric.mp3agic.BufferToolsTest.returnsMinusOneWhenNoDoubleTerminator()
com.mpatric.mp3agic.BufferTools.padStringRight(String,int,char);com.mpatric.mp3agic.BufferToolsTest.shouldRightPadStringsCorrectly();com.mpatric.mp3agic.BufferToolsTest.shouldRightPadUnicodeStringsCorrectly();com.mpatric.mp3agic.BufferToolsTest.shouldPadRightWithNullCharacters();;;;;;;;;;;
com.mpatric.mp3agic.BufferTools.setBit(byte,int,boolean);com.mpatric.mp3agic.BufferToolsTest.shouldSetBitsInBytesCorrectly();;;;;;;;;;;;;
com.mpatric.mp3agic.BufferTools.sizeSynchronisationWouldSubtract(byte[]);com.mpatric.mp3agic.BufferToolsTest.shouldDetermineSynchronisationSizesCorrectly();;;;;;;;;;;;;
com.mpatric.mp3agic.BufferTools.synchroniseBuffer(byte[]);com.mpatric.mp3agic.BufferToolsTest.shouldUnsynchroniseThenSynchroniseFFExBytesCorrectly();com.mpatric.mp3agic.BufferToolsTest.shouldUnsynchroniseThenSynchroniseBufferMinimalBufferCorrectly();;;;;;;;;;;;
com.mpatric.mp3agic.BufferTools.trimStringRight(String);com.mpatric.mp3agic.BufferToolsTest.shouldRightTrimStringsCorrectly();com.mpatric.mp3agic.BufferToolsTest.shouldRightTrimUnicodeStringsCorrectly();;;;;;;;;;;;
com.mpatric.mp3agic.BufferTools.unsynchroniseBuffer(byte[]);com.mpatric.mp3agic.BufferToolsTest.shouldUnsynchroniseThenSynchroniseBufferFullOfFFsCorrectly();com.mpatric.mp3agic.BufferToolsTest.shouldReturnOriginalBufferIfNoUnynchronisationOrSynchronisationIsRequired();;;;;;;;;;;;
com.mpatric.mp3agic.EncodedText.EncodedText(byte,byte[]);com.mpatric.mp3agic.EncodedTextTest.shouldConstructFromStringOrBytes();com.mpatric.mp3agic.EncodedTextTest.shouldEncodeAndDecodeISO8859_1Text();com.mpatric.mp3agic.EncodedTextTest.shouldEncodeAndDecodeUTF8Text();com.mpatric.mp3agic.EncodedTextTest.shouldEncodeAndDecodeUTF16Text();com.mpatric.mp3agic.EncodedTextTest.shouldEncodeAndDecodeUTF16BEText();com.mpatric.mp3agic.EncodedTextTest.UTF16ShouldDecodeBEWhenSpecifiedInBOM();com.mpatric.mp3agic.EncodedTextTest.shouldTranscodeFromOneEncodingToAnother();com.mpatric.mp3agic.EncodedTextTest.shouldThrowExceptionWhenTranscodingWithInvalidCharacterSet();com.mpatric.mp3agic.EncodedTextTest.shouldReturnNullWhenDecodingInvalidString();com.mpatric.mp3agic.EncodedTextTest.shouldHandleBacktickCharacterInString();;;;
com.mpatric.mp3agic.ID3v1Genres.matchGenreDescription(String);com.mpatric.mp3agic.ID3v1GenresTest.returnsMinusOneForNonExistentGenre();com.mpatric.mp3agic.ID3v1GenresTest.returnsCorrectGenreIdForFirstExistentGenre();;;;;;;;;;;;
com.mpatric.mp3agic.ID3Wrapper.clearComment();com.mpatric.mp3agic.ID3WrapperTest.clearsCommentOnV1Tag();com.mpatric.mp3agic.ID3WrapperTest.clearsCommentFrameOnV2Tag();;;;;;;;;;;;
com.mpatric.mp3agic.ID3Wrapper.getAlbum();com.mpatric.mp3agic.ID3WrapperTest.getAlbumReturnsV2TagsAlbumBeforeV1TagsAlbum();com.mpatric.mp3agic.ID3WrapperTest.getAlbumReturnsV1TagsAlbumIfV2TagsAlbumIsEmpty();com.mpatric.mp3agic.ID3WrapperTest.getAlbumReturnsNullIfBothTagsDoNotExist();;;;;;;;;;;
com.mpatric.mp3agic.ID3Wrapper.getArtist();com.mpatric.mp3agic.ID3WrapperTest.getArtistReturnsV2TagsArtistBeforeV1TagsArtist();com.mpatric.mp3agic.ID3WrapperTest.getArtistReturnsV1TagsArtistIfV2TagDoesNotExist();com.mpatric.mp3agic.ID3WrapperTest.getArtistReturnsNullIfBothTagsDoNotExist();;;;;;;;;;;
com.mpatric.mp3agic.ID3Wrapper.getComment();com.mpatric.mp3agic.ID3WrapperTest.getCommentReturnsV2TagsCommentBeforeV1TagsComment();com.mpatric.mp3agic.ID3WrapperTest.getCommentReturnsV1TagsCommentIfV2TagsCommentDoesNotExist();com.mpatric.mp3agic.ID3WrapperTest.getCommentReturnsNullIfBothTagsDoNotExist();;;;;;;;;;;
com.mpatric.mp3agic.ID3Wrapper.getComposer();com.mpatric.mp3agic.ID3WrapperTest.getComposerReturnsV2TagsComposer();com.mpatric.mp3agic.ID3WrapperTest.getComposerReturnsNullIfV2TagDoesNotExist();;;;;;;;;;;;
com.mpatric.mp3agic.MpegFrame.getLengthInBytes();com.mpatric.mp3agic.MpegFrameTest.shouldExtractValidMpegVersion1Header();com.mpatric.mp3agic.MpegFrameTest.shouldProcessValidMpegVersion2Header();;;;;;;;;;;;
com.mpatric.mp3agic.ID3Wrapper.setComment(String);com.mpatric.mp3agic.ID3WrapperTest.setsCommentOnBothV1AndV2Tags();com.mpatric.mp3agic.ID3WrapperTest.setsCommentOnV1TagOnly();com.mpatric.mp3agic.ID3WrapperTest.setsCommentOnV2TagOnly();;;;;;;;;;;
com.mpatric.mp3agic.ID3Wrapper.getTrack();com.mpatric.mp3agic.ID3WrapperTest.getTrackReturnsV2TagsTrackBeforeV1TagsTrack();com.mpatric.mp3agic.ID3WrapperTest.getTrackReturnsV1TagsTrackIfV2TagsTrackIsEmpty();com.mpatric.mp3agic.ID3WrapperTest.getTrackReturnsV1TagsTrackIfV2TagsTrackDoesNotExist();com.mpatric.mp3agic.ID3WrapperTest.setCommentDoesNotThrowExceptionWhenBothTagsDoNotExist();com.mpatric.mp3agic.ID3WrapperTest.getTrackReturnsNullIfBothTagsDoNotExist();;;;;;;;;
com.mpatric.mp3agic.ID3Wrapper.getCopyright();com.mpatric.mp3agic.ID3WrapperTest.getCopyrightReturnsV2TagsCopyright();com.mpatric.mp3agic.ID3WrapperTest.getCopyrightReturnsNullIfV2TagDoesNotExist();;;;;;;;;;;;
com.mpatric.mp3agic.EncodedText.toBytes();com.mpatric.mp3agic.EncodedTextTest.shouldStillReturnBytesWhenUnicodeDataIsEmpty();com.mpatric.mp3agic.EncodedTextTest.shouldStillReturnBytesWhenDataIsEmpty();com.mpatric.mp3agic.EncodedTextTest.shouldStillReturnBytesWhenUnicodeStringIsEmpty();com.mpatric.mp3agic.EncodedTextTest.shouldStillReturnBytesWhenStringIsEmpty();;;;;;;;;;
com.mpatric.mp3agic.BufferTools.asciiOnly(String);com.mpatric.mp3agic.BufferToolsTest.shouldConvertNonAsciiCharactersToQuestionMarksInString();;;;;;;;;;;;;
com.mpatric.mp3agic.AbstractID3v2Tag.setBPM(int);com.mpatric.mp3agic.ID3v22TagTest.shouldStoreAndRetrieveBPM();;;;;;;;;;;;;
com.mpatric.mp3agic.AbstractID3v2Tag.isCompilation();com.mpatric.mp3agic.ID3v22TagTest.shouldStoreAndRetrieveCompilation();;;;;;;;;;;;;
com.mpatric.mp3agic.AbstractID3v2Tag.getKey();com.mpatric.mp3agic.ID3v22TagTest.shouldStoreAndRetrieveKey();;;;;;;;;;;;;
